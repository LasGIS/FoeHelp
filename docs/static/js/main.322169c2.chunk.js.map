{"version":3,"sources":["pages/Main/App.tsx","serviceWorker.ts","redux/history.ts","common/services/reducer.ts","common/services/action-constants.ts","redux/rootReducer.ts","redux/configureStore.ts","index.tsx"],"names":["SubMenu","Menu","Content","Layout","Footer","Sider","App","useState","menuCollapsed","setMenuCollapsed","style","minHeight","className","collapsible","collapsed","onCollapse","classNames","mode","theme","defaultSelectedKeys","defaultOpenKeys","height","key","icon","UserOutlined","title","Item","LaptopOutlined","NotificationOutlined","padding","margin","align","name","Boolean","window","location","hostname","match","createHashHistory","initialState","loading","commonReducer","state","action","type","history","combineReducers","router","connectRouter","common","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","routerMiddleware","thunk","store","preloadedState","createStore","rootReducer","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.322169c2.chunk.js","sourcesContent":["/*\r\n * Copyright 2020 LasGIS FOE Helper\r\n */\r\n\r\nimport './App.scss';\r\nimport React, { useState } from 'react';\r\nimport { Breadcrumb, Button, Layout, Menu, Space } from 'antd';\r\nimport { LaptopOutlined, NotificationOutlined, UserOutlined } from '@ant-design/icons';\r\nimport classNames from 'classnames';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nconst App = () => {\r\n\r\n  const [ menuCollapsed, setMenuCollapsed ] = useState<boolean>(false);\r\n\r\n  return (\r\n    <Layout style={{ minHeight: '100vh' }}>\r\n      {/*<Header className=\"header\">\r\n        <Menu theme=\"light\" mode=\"horizontal\" defaultSelectedKeys={[ '2' ]}>\r\n          <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n          <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n          <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n      <Layout>*/}\r\n      <Sider\r\n        className=\"site-left-menu\"\r\n        collapsible\r\n        collapsed={menuCollapsed}\r\n        onCollapse={(collapsed) => {\r\n          setMenuCollapsed(collapsed);\r\n        }}\r\n      >\r\n        <div className={classNames(\"logo\", { \"logo__short\": menuCollapsed })}><span>Logo</span></div>\r\n        <Menu\r\n          mode=\"inline\"\r\n          theme='dark'\r\n          defaultSelectedKeys={[ '1' ]}\r\n          defaultOpenKeys={[ 'sub1' ]}\r\n          style={{ height: '100%' }}\r\n        >\r\n          <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"subnav 1\">\r\n            <Menu.Item key=\"1\">option1</Menu.Item>\r\n            <Menu.Item key=\"2\">option2</Menu.Item>\r\n            <Menu.Item key=\"3\">option3</Menu.Item>\r\n            <Menu.Item key=\"4\">option4</Menu.Item>\r\n          </SubMenu>\r\n          <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"subnav 2\">\r\n            <Menu.Item key=\"5\">option5</Menu.Item>\r\n            <Menu.Item key=\"6\">option6</Menu.Item>\r\n            <Menu.Item key=\"7\">option7</Menu.Item>\r\n            <Menu.Item key=\"8\">option8</Menu.Item>\r\n          </SubMenu>\r\n          <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\r\n            <Menu.Item key=\"9\">option9</Menu.Item>\r\n            <Menu.Item key=\"10\">option10</Menu.Item>\r\n            <Menu.Item key=\"11\">option11</Menu.Item>\r\n            <Menu.Item key=\"12\">option12</Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      </Sider>\r\n      <Layout style={{ padding: '0 12px' }}>\r\n        <Breadcrumb style={{ margin: '6px 0' }}>\r\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item>List</Breadcrumb.Item>\r\n          <Breadcrumb.Item>App</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n        <Content className=\"site-layout-background\">\r\n          <Space align='center'>\r\n            <Button title='ttt' name='Button1'>Button1</Button>\r\n            <Button title='ttt' name='Button2'>Button2</Button>\r\n            <Button title='ttt' name='Button3'>Button3</Button>\r\n            <Button title='ttt' name='Button4'>Button4</Button>\r\n          </Space>\r\n        </Content>\r\n        <Footer className='footer'>Ant Design Â©2018 Created by Ant UED</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/*\r\n * Copyright 2020 LasGIS FOE Helper\r\n */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/*\r\n * Copyright 2020 LasGIS FOE Helper\r\n */\r\n\r\nimport { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();\r\n","/*\n * Copyright 2020 LasGIS FOE Helper\n */\n\nimport { COMMON_HIDE_LOADER, COMMON_SHOW_LOADER } from './action-constants';\nimport { CommonActions, CommonStoreData } from './types';\n\nconst initialState: CommonStoreData = {\n  loading: false,\n};\n\nexport function commonReducer(state: CommonStoreData = initialState, action: CommonActions): CommonStoreData {\n  switch (action.type) {\n    case COMMON_SHOW_LOADER:\n      return { ...state, loading: true };\n    case COMMON_HIDE_LOADER:\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n}\n","/*\n * Copyright 2020 LasGIS FOE Helper\n */\n\nexport const COMMON_SHOW_LOADER = 'COMMON_SHOW_LOADER';\nexport const COMMON_HIDE_LOADER = 'COMMON_HIDE_LOADER';\n","/*\n * Copyright 2020 LasGIS FOE Helper\n */\n\nimport { combineReducers } from 'redux';\nimport { commonReducer } from '../common/services/reducer';\nimport { connectRouter } from \"connected-react-router\";\n\nexport default (history: any) => combineReducers({\n  router: connectRouter(history),\n  common: commonReducer,\n});\n","/*\r\n * Copyright 2020 LasGIS FOE Helper\r\n */\r\n\r\nimport history from './history';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object'\r\n  && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(routerMiddleware(history), thunk));\r\n\r\nexport default function configureStore(preloadedState = {}) {\r\n  return createStore(rootReducer(history), preloadedState, enhancer);\r\n}\r\n","/*\r\n * Copyright 2020 LasGIS FOE Helper\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './pages/Main/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./redux/configureStore\";\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n//  <React.StrictMode>\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>\r\n//  </React.StrictMode>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}